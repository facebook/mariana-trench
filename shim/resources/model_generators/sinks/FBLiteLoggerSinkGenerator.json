{
  "model_generators": [
    {
      "find": "methods",
      "where": [
        {
          "constraint": "any_of",
          "inners": [
            {
              "constraint": "parent",
              "inner": {
                "constraint": "name",
                "pattern": "Lcom/facebook/snaptu/qe/QuickExperimentParameters;"
              }
            },
            {
              "constraint": "parent",
              "inner": {
                "constraint": "name",
                "pattern": "Lcom/facebook/snaptu/qe/QuickExperiment;"
              }
            },
            {
              "constraint": "signature",
              "pattern": "Lcom/facebook/snaptu/qe/QE;.*"
            },
            {
              "constraint": "signature",
              "pattern": "Lcom/moblica/apps/facebook/ui/bloks/common/script/FBLiteBloksCoreExtensions;\\.evaluate.*"
            },
            {
              "constraint": "signature",
              "pattern": "Lcom/moblica/appsrv/services/db/PartitionedClientPersistence;\\.getUserPersistenceData.*"
            },
            {
              "constraint": "signature",
              "pattern": "Lcom/moblica/data/AbstractDataAccess;\\.fireErrorOccured.*"
            },
            {
              "constraint": "signature",
              "pattern": "Lcom/moblica/apps/facebook/ui/iglitebloks/CarbonLoginService;\\.getCurrentSession.*"
            },
            {
              "constraint": "signature",
              "pattern": "Lcom/moblica/apps/facebook/ui/messaging/business/BusinessGreenDotAnalyticsLogger;\\.logGreenDotImpression.*"
            },
            {
              "constraint": "signature",
              "pattern": ".*iglite.*"
            },
            {
              "constraint": "signature",
              "pattern": "Lcom/moblica/appsrv/appdesc/v1/ApplicationDescriptionV1;\\.getPropertyString.*"
            },
            {
              "constraint": "signature",
              "pattern": "Lcom/moblica/apps/facebook/ui/bloks/ui/BloksDomParser;\\.getValue.*"
            },
            {
              "constraint": "signature",
              "pattern": "Lcom/moblica/dmg/adaptation/formatters/HtmlFormatter;\\.unmappedMarkupToHtml.*"
            },
            {
              "constraint": "signature",
              "pattern": "Lcom/moblica/appsrv/appapi/command/OpenUrlCommand;\\.warnOnEmptyUrl.*"
            },
            {
              "constraint": "signature",
              "pattern": "Lcom/moblica/apps/facebook/ui/composer/publish/retry/PendingStoryMutationDataInput\\$Codec;\\.encode.*"
            },
            {
              "constraint": "signature",
              "pattern": "Lcom/moblica/apps/facebook/ui/composer/upload/PendingComposerPost\\$Codec;\\.encode.*"
            },
            {
              "constraint": "signature",
              "pattern": "Lcom/moblica/apps/facebook/ui/messaging/ResourceResolver;\\.resolvePhotos.*"
            }
          ]
        }
      ],
      "model": {
        "for_all_parameters": [
          {
            "variable": "x",
            "where": [],
            "add_features_to_arguments": [
              {
                "features": [
                  "has-no-epd-data"
                ],
                "port": "Argument(x)"
              }
            ]
          }
        ]
      }
    },
    {
      "find": "methods",
      "where": [
        {
          "constraint": "any_of",
          "inners": [
            {
              "constraint": "signature",
              "pattern": "Lcom/facebook/lite/util/ILiteSystrace;.*"
            },
            {
              "constraint": "signature",
              "pattern": "Lcom/facebook/lite/qpl/ILiteQPLProvider;\\.write.*"
            },
            {
              "constraint": "signature",
              "pattern": "Lcom/facebook/lite/profilo/ILiteProfilo;\\.(write|add).*"
            },
            {
              "constraint": "signature",
              "pattern": "Lcom/moblica/dmg/session;\\.recordMarauderEvent.*"
            },
            {
              "constraint": "signature",
              "pattern": "Lcom/facebook/lite/marauder/MarauderClient;\\.log.*"
            },
            {
              "constraint": "signature",
              "pattern": "Lcom/facebook/lite/logging/scruba/scuba;\\.put.*"
            }
          ]
        }
      ],
      "model": {
        "for_all_parameters": [
          {
            "variable": "x",
            "where": [],
            "sinks": [
              {
                "kind": "Logging",
                "port": "Argument(x)"
              }
            ]
          }
        ]
      }
    },
    {
      "find": "methods",
      "where": [
        {
          "constraint": "signature",
          "pattern": "Lorg/slf4j/Logger;\\.(info|error|fatal|log).*"
        }
      ],
      "model": {
        "modes": [
          "skip-analysis",
          "override-default"
        ],
        "for_all_parameters": [
          {
            "variable": "x",
            "where": [],
            "sinks": [
              {
                "kind": "Logging",
                "port": "Argument(x)"
              }
            ]
          }
        ]
      }
    }
  ]
}
