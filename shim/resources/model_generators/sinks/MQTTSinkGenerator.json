{
  "model_generators": [
    {
      "find": "methods",
      "where": [
        {
          "constraint": "name",
          "pattern": "publish"
        },
        {
          "constraint": "parent",
          "inner": {
            "constraint": "extends",
            "inner": {
              "constraint": "any_of",
              "inners": [
                {
                  "constraint": "name",
                  "pattern": ".*/MQTTProtocolImp;"
                },
                {
                  "constraint": "name",
                  "pattern": ".*/UserMqttConnection;"
                },
                {
                  "constraint": "name",
                  "pattern": ".*/MqttClient;"
                },
                {
                  "constraint": "name",
                  "pattern": ".*/MultiuserMqttServiceWrapper;"
                },
                {
                  "constraint": "name",
                  "pattern": ".*/EntityPresenceMqttPublisher;"
                },
                {
                  "constraint": "name",
                  "pattern": ".*/MultiuserMqttServiceClient;"
                },
                {
                  "constraint": "name",
                  "pattern": ".*/MqttPushServiceClient;"
                }
              ]
            }
          }
        }
      ],
      "model": {
        "modes": [
          "skip-analysis"
        ],
        "for_all_parameters": [
          {
            "variable": "x",
            "sinks": [
              {
                "kind": "MQTTPublishMessage",
                "port": "Argument(x)"
              }
            ]
          }
        ]
      }
    },
    {
      "find": "methods",
      "where": [
        {
          "constraint": "name",
          "pattern": "get(Mqtt|Analytics)Endpoint"
        },
        {
          "constraint": "parent",
          "inner": {
            "constraint": "extends",
            "inner": {
              "constraint": "name",
              "pattern": "Lcom/facebook/rti/mqtt/common/config/ConnectionConfigOverrides;"
            }
          }
        }
      ],
      "model": {
        "sinks": [
          {
            "kind": "MQTTPublishMessage",
            "port": "Return"
          }
        ]
      }
    }
  ]
}
